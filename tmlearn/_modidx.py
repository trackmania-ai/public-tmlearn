# Autogenerated by nbdev

d = { 'settings': { 'branch': 'master',
                'doc_baseurl': '/tmlearn/',
                'doc_host': 'https://trackmania-ai.github.io',
                'git_url': 'https://github.com/trackmania-ai/tmlearn/tree/master/',
                'lib_path': 'tmlearn'},
  'syms': { 'tmlearn.agent.dqn': { 'tmlearn.agent.dqn.DqnAgent': ('agent_dqn.html#dqnagent', 'tmlearn/agent/dqn.py'),
                                   'tmlearn.agent.dqn.DqnAgent.__init__': ('agent_dqn.html#dqnagent.__init__', 'tmlearn/agent/dqn.py'),
                                   'tmlearn.agent.dqn.DqnAgent._sync_Q_target': ( 'agent_dqn.html#dqnagent._sync_q_target',
                                                                                  'tmlearn/agent/dqn.py'),
                                   'tmlearn.agent.dqn.DqnAgent._td_estimate': ( 'agent_dqn.html#dqnagent._td_estimate',
                                                                                'tmlearn/agent/dqn.py'),
                                   'tmlearn.agent.dqn.DqnAgent._td_target': ('agent_dqn.html#dqnagent._td_target', 'tmlearn/agent/dqn.py'),
                                   'tmlearn.agent.dqn.DqnAgent.fit_one_batch': ( 'agent_dqn.html#dqnagent.fit_one_batch',
                                                                                 'tmlearn/agent/dqn.py'),
                                   'tmlearn.agent.dqn.DqnAgent.load_state_dict': ( 'agent_dqn.html#dqnagent.load_state_dict',
                                                                                   'tmlearn/agent/dqn.py'),
                                   'tmlearn.agent.dqn.DqnAgent.nb_batch': ('agent_dqn.html#dqnagent.nb_batch', 'tmlearn/agent/dqn.py'),
                                   'tmlearn.agent.dqn.DqnAgent.net_target': ('agent_dqn.html#dqnagent.net_target', 'tmlearn/agent/dqn.py'),
                                   'tmlearn.agent.dqn.DqnAgent.optimizer': ('agent_dqn.html#dqnagent.optimizer', 'tmlearn/agent/dqn.py'),
                                   'tmlearn.agent.dqn.DqnAgent.scaler': ('agent_dqn.html#dqnagent.scaler', 'tmlearn/agent/dqn.py'),
                                   'tmlearn.agent.dqn.DqnAgent.select_action': ( 'agent_dqn.html#dqnagent.select_action',
                                                                                 'tmlearn/agent/dqn.py'),
                                   'tmlearn.agent.dqn.DqnAgent.set_lr': ('agent_dqn.html#dqnagent.set_lr', 'tmlearn/agent/dqn.py'),
                                   'tmlearn.agent.dqn.DqnAgent.state_dict': ('agent_dqn.html#dqnagent.state_dict', 'tmlearn/agent/dqn.py'),
                                   'tmlearn.agent.dqn.EpsilonGreedyExploration': ( 'agent_dqn.html#epsilongreedyexploration',
                                                                                   'tmlearn/agent/dqn.py'),
                                   'tmlearn.agent.dqn.EpsilonGreedyExploration.__init__': ( 'agent_dqn.html#epsilongreedyexploration.__init__',
                                                                                            'tmlearn/agent/dqn.py'),
                                   'tmlearn.agent.dqn.EpsilonGreedyExploration.select_action': ( 'agent_dqn.html#epsilongreedyexploration.select_action',
                                                                                                 'tmlearn/agent/dqn.py'),
                                   'tmlearn.agent.dqn.Exploration': ('agent_dqn.html#exploration', 'tmlearn/agent/dqn.py'),
                                   'tmlearn.agent.dqn.Exploration.__call__': ( 'agent_dqn.html#exploration.__call__',
                                                                               'tmlearn/agent/dqn.py'),
                                   'tmlearn.agent.dqn.Exploration.__init__': ( 'agent_dqn.html#exploration.__init__',
                                                                               'tmlearn/agent/dqn.py'),
                                   'tmlearn.agent.dqn.Exploration.name': ('agent_dqn.html#exploration.name', 'tmlearn/agent/dqn.py'),
                                   'tmlearn.agent.dqn.Exploration.select_action': ( 'agent_dqn.html#exploration.select_action',
                                                                                    'tmlearn/agent/dqn.py'),
                                   'tmlearn.agent.dqn.Exploration.state_dict': ( 'agent_dqn.html#exploration.state_dict',
                                                                                 'tmlearn/agent/dqn.py'),
                                   'tmlearn.agent.dqn.NoExploration': ('agent_dqn.html#noexploration', 'tmlearn/agent/dqn.py'),
                                   'tmlearn.agent.dqn.NoExploration.select_action': ( 'agent_dqn.html#noexploration.select_action',
                                                                                      'tmlearn/agent/dqn.py'),
                                   'tmlearn.agent.dqn.RankSoftmaxExploration': ( 'agent_dqn.html#ranksoftmaxexploration',
                                                                                 'tmlearn/agent/dqn.py'),
                                   'tmlearn.agent.dqn.RankSoftmaxExploration.__init__': ( 'agent_dqn.html#ranksoftmaxexploration.__init__',
                                                                                          'tmlearn/agent/dqn.py'),
                                   'tmlearn.agent.dqn.RankSoftmaxExploration.select_action': ( 'agent_dqn.html#ranksoftmaxexploration.select_action',
                                                                                               'tmlearn/agent/dqn.py'),
                                   'tmlearn.agent.dqn.ResmaxExploration': ('agent_dqn.html#resmaxexploration', 'tmlearn/agent/dqn.py'),
                                   'tmlearn.agent.dqn.ResmaxExploration.__init__': ( 'agent_dqn.html#resmaxexploration.__init__',
                                                                                     'tmlearn/agent/dqn.py'),
                                   'tmlearn.agent.dqn.ResmaxExploration.select_action': ( 'agent_dqn.html#resmaxexploration.select_action',
                                                                                          'tmlearn/agent/dqn.py')},
            'tmlearn.agent.sac': { 'tmlearn.agent.sac.SacAgent': ('agent_sac.html#sacagent', 'tmlearn/agent/sac.py'),
                                   'tmlearn.agent.sac.SacAgent.__init__': ('agent_sac.html#sacagent.__init__', 'tmlearn/agent/sac.py'),
                                   'tmlearn.agent.sac.SacAgent._critic_soft_update': ( 'agent_sac.html#sacagent._critic_soft_update',
                                                                                       'tmlearn/agent/sac.py'),
                                   'tmlearn.agent.sac.SacAgent._q_estimate': ( 'agent_sac.html#sacagent._q_estimate',
                                                                               'tmlearn/agent/sac.py'),
                                   'tmlearn.agent.sac.SacAgent._q_target': ('agent_sac.html#sacagent._q_target', 'tmlearn/agent/sac.py'),
                                   'tmlearn.agent.sac.SacAgent._update_actor': ( 'agent_sac.html#sacagent._update_actor',
                                                                                 'tmlearn/agent/sac.py'),
                                   'tmlearn.agent.sac.SacAgent._update_alpha': ( 'agent_sac.html#sacagent._update_alpha',
                                                                                 'tmlearn/agent/sac.py'),
                                   'tmlearn.agent.sac.SacAgent._update_critic': ( 'agent_sac.html#sacagent._update_critic',
                                                                                  'tmlearn/agent/sac.py'),
                                   'tmlearn.agent.sac.SacAgent._update_param': ( 'agent_sac.html#sacagent._update_param',
                                                                                 'tmlearn/agent/sac.py'),
                                   'tmlearn.agent.sac.SacAgent.actor_optimizer': ( 'agent_sac.html#sacagent.actor_optimizer',
                                                                                   'tmlearn/agent/sac.py'),
                                   'tmlearn.agent.sac.SacAgent.alpha': ('agent_sac.html#sacagent.alpha', 'tmlearn/agent/sac.py'),
                                   'tmlearn.agent.sac.SacAgent.alpha_optimizer': ( 'agent_sac.html#sacagent.alpha_optimizer',
                                                                                   'tmlearn/agent/sac.py'),
                                   'tmlearn.agent.sac.SacAgent.critic': ('agent_sac.html#sacagent.critic', 'tmlearn/agent/sac.py'),
                                   'tmlearn.agent.sac.SacAgent.critic_optimizer': ( 'agent_sac.html#sacagent.critic_optimizer',
                                                                                    'tmlearn/agent/sac.py'),
                                   'tmlearn.agent.sac.SacAgent.critic_target': ( 'agent_sac.html#sacagent.critic_target',
                                                                                 'tmlearn/agent/sac.py'),
                                   'tmlearn.agent.sac.SacAgent.fit_one_batch': ( 'agent_sac.html#sacagent.fit_one_batch',
                                                                                 'tmlearn/agent/sac.py'),
                                   'tmlearn.agent.sac.SacAgent.load_state_dict': ( 'agent_sac.html#sacagent.load_state_dict',
                                                                                   'tmlearn/agent/sac.py'),
                                   'tmlearn.agent.sac.SacAgent.log_alpha': ('agent_sac.html#sacagent.log_alpha', 'tmlearn/agent/sac.py'),
                                   'tmlearn.agent.sac.SacAgent.nb_batch': ('agent_sac.html#sacagent.nb_batch', 'tmlearn/agent/sac.py'),
                                   'tmlearn.agent.sac.SacAgent.select_action': ( 'agent_sac.html#sacagent.select_action',
                                                                                 'tmlearn/agent/sac.py'),
                                   'tmlearn.agent.sac.SacAgent.set_lr': ('agent_sac.html#sacagent.set_lr', 'tmlearn/agent/sac.py'),
                                   'tmlearn.agent.sac.SacAgent.state_dict': ('agent_sac.html#sacagent.state_dict', 'tmlearn/agent/sac.py'),
                                   'tmlearn.agent.sac.SacAgent.target_entropy': ( 'agent_sac.html#sacagent.target_entropy',
                                                                                  'tmlearn/agent/sac.py'),
                                   'tmlearn.agent.sac.SacAgent.tensor': ('agent_sac.html#sacagent.tensor', 'tmlearn/agent/sac.py'),
                                   'tmlearn.agent.sac.TwinnedCriticNet': ('agent_sac.html#twinnedcriticnet', 'tmlearn/agent/sac.py'),
                                   'tmlearn.agent.sac.TwinnedCriticNet.__init__': ( 'agent_sac.html#twinnedcriticnet.__init__',
                                                                                    'tmlearn/agent/sac.py'),
                                   'tmlearn.agent.sac.TwinnedCriticNet.forward': ( 'agent_sac.html#twinnedcriticnet.forward',
                                                                                   'tmlearn/agent/sac.py')},
            'tmlearn.callback': { 'tmlearn.callback.Callback': ('callback.html#callback', 'tmlearn/callback.py'),
                                  'tmlearn.callback.Callback.name': ('callback.html#callback.name', 'tmlearn/callback.py'),
                                  'tmlearn.callback.Callbackable': ('callback.html#callbackable', 'tmlearn/callback.py'),
                                  'tmlearn.callback.Callbackable.__call__': ('callback.html#callbackable.__call__', 'tmlearn/callback.py'),
                                  'tmlearn.callback.Callbackable.__init__': ('callback.html#callbackable.__init__', 'tmlearn/callback.py'),
                                  'tmlearn.callback.Callbackable.add_cb': ('callback.html#callbackable.add_cb', 'tmlearn/callback.py'),
                                  'tmlearn.callback.Callbackable.add_cbs': ('callback.html#callbackable.add_cbs', 'tmlearn/callback.py'),
                                  'tmlearn.callback.Callbackable.assert_unique': ( 'callback.html#callbackable.assert_unique',
                                                                                   'tmlearn/callback.py'),
                                  'tmlearn.callback.Callbackable.cbs_state_dict': ( 'callback.html#callbackable.cbs_state_dict',
                                                                                    'tmlearn/callback.py'),
                                  'tmlearn.callback.Callbackable.load_cbs_state_dict': ( 'callback.html#callbackable.load_cbs_state_dict',
                                                                                         'tmlearn/callback.py')},
            'tmlearn.collector': { 'tmlearn.collector.ActionPublisherCallback': ( 'collector.html#actionpublishercallback',
                                                                                  'tmlearn/collector.py'),
                                   'tmlearn.collector.ActionPublisherCallback.before_env_step': ( 'collector.html#actionpublishercallback.before_env_step',
                                                                                                  'tmlearn/collector.py'),
                                   'tmlearn.collector.ActionPublisherCallback.before_respawn': ( 'collector.html#actionpublishercallback.before_respawn',
                                                                                                 'tmlearn/collector.py'),
                                   'tmlearn.collector.CancelEpisodeException': ( 'collector.html#cancelepisodeexception',
                                                                                 'tmlearn/collector.py'),
                                   'tmlearn.collector.CancelPushException': ('collector.html#cancelpushexception', 'tmlearn/collector.py'),
                                   'tmlearn.collector.CollectorWorker': ('collector.html#collectorworker', 'tmlearn/collector.py'),
                                   'tmlearn.collector.CollectorWorker.__init__': ( 'collector.html#collectorworker.__init__',
                                                                                   'tmlearn/collector.py'),
                                   'tmlearn.collector.CollectorWorker.run': ('collector.html#collectorworker.run', 'tmlearn/collector.py'),
                                   'tmlearn.collector.EigenCamPublisherCallback': ( 'collector.html#eigencampublishercallback',
                                                                                    'tmlearn/collector.py'),
                                   'tmlearn.collector.EigenCamPublisherCallback.after_init': ( 'collector.html#eigencampublishercallback.after_init',
                                                                                               'tmlearn/collector.py'),
                                   'tmlearn.collector.EigenCamPublisherCallback.before_env_step': ( 'collector.html#eigencampublishercallback.before_env_step',
                                                                                                    'tmlearn/collector.py'),
                                   'tmlearn.collector.EigenCamPublisherCallback.save_activations': ( 'collector.html#eigencampublishercallback.save_activations',
                                                                                                     'tmlearn/collector.py'),
                                   'tmlearn.collector.ExplorationSwitcherCallback': ( 'collector.html#explorationswitchercallback',
                                                                                      'tmlearn/collector.py'),
                                   'tmlearn.collector.ExplorationSwitcherCallback.__init__': ( 'collector.html#explorationswitchercallback.__init__',
                                                                                               'tmlearn/collector.py'),
                                   'tmlearn.collector.ExplorationSwitcherCallback.after_done': ( 'collector.html#explorationswitchercallback.after_done',
                                                                                                 'tmlearn/collector.py'),
                                   'tmlearn.collector.ExplorationSwitcherCallback.after_session': ( 'collector.html#explorationswitchercallback.after_session',
                                                                                                    'tmlearn/collector.py'),
                                   'tmlearn.collector.ExplorationSwitcherCallback.before_session': ( 'collector.html#explorationswitchercallback.before_session',
                                                                                                     'tmlearn/collector.py'),
                                   'tmlearn.collector.ExplorationSwitcherCallback.load_state_dict': ( 'collector.html#explorationswitchercallback.load_state_dict',
                                                                                                      'tmlearn/collector.py'),
                                   'tmlearn.collector.ExplorationSwitcherCallback.state_dict': ( 'collector.html#explorationswitchercallback.state_dict',
                                                                                                 'tmlearn/collector.py'),
                                   'tmlearn.collector.IgnoreFinished': ('collector.html#ignorefinished', 'tmlearn/collector.py'),
                                   'tmlearn.collector.IgnoreFinished.after_env_step': ( 'collector.html#ignorefinished.after_env_step',
                                                                                        'tmlearn/collector.py'),
                                   'tmlearn.collector.IgnoreLaggyStepCallback': ( 'collector.html#ignorelaggystepcallback',
                                                                                  'tmlearn/collector.py'),
                                   'tmlearn.collector.IgnoreLaggyStepCallback.__init__': ( 'collector.html#ignorelaggystepcallback.__init__',
                                                                                           'tmlearn/collector.py'),
                                   'tmlearn.collector.IgnoreLaggyStepCallback.after_env_step': ( 'collector.html#ignorelaggystepcallback.after_env_step',
                                                                                                 'tmlearn/collector.py'),
                                   'tmlearn.collector.IgnoreRespawnAndUnfinished': ( 'collector.html#ignorerespawnandunfinished',
                                                                                     'tmlearn/collector.py'),
                                   'tmlearn.collector.IgnoreRespawnAndUnfinished.after_env_step': ( 'collector.html#ignorerespawnandunfinished.after_env_step',
                                                                                                    'tmlearn/collector.py'),
                                   'tmlearn.collector.LagCallback': ('collector.html#lagcallback', 'tmlearn/collector.py'),
                                   'tmlearn.collector.LagCallback.after_collect_step': ( 'collector.html#lagcallback.after_collect_step',
                                                                                         'tmlearn/collector.py'),
                                   'tmlearn.collector.LagCallback.after_env_step': ( 'collector.html#lagcallback.after_env_step',
                                                                                     'tmlearn/collector.py'),
                                   'tmlearn.collector.LagCallback.before_collect_step': ( 'collector.html#lagcallback.before_collect_step',
                                                                                          'tmlearn/collector.py'),
                                   'tmlearn.collector.LagCallback.before_env_step': ( 'collector.html#lagcallback.before_env_step',
                                                                                      'tmlearn/collector.py'),
                                   'tmlearn.collector.MemoryFullRecoverCallback': ( 'collector.html#memoryfullrecovercallback',
                                                                                    'tmlearn/collector.py'),
                                   'tmlearn.collector.MemoryFullRecoverCallback.__init__': ( 'collector.html#memoryfullrecovercallback.__init__',
                                                                                             'tmlearn/collector.py'),
                                   'tmlearn.collector.MemoryFullRecoverCallback.after_reset': ( 'collector.html#memoryfullrecovercallback.after_reset',
                                                                                                'tmlearn/collector.py'),
                                   'tmlearn.collector.PublisherCallback': ('collector.html#publishercallback', 'tmlearn/collector.py'),
                                   'tmlearn.collector.PublisherCallback.__init__': ( 'collector.html#publishercallback.__init__',
                                                                                     'tmlearn/collector.py'),
                                   'tmlearn.collector.PublisherCallback.publish': ( 'collector.html#publishercallback.publish',
                                                                                    'tmlearn/collector.py'),
                                   'tmlearn.collector.PublisherCallback.publish_kwargs': ( 'collector.html#publishercallback.publish_kwargs',
                                                                                           'tmlearn/collector.py'),
                                   'tmlearn.collector.RecoverEnvException': ('collector.html#recoverenvexception', 'tmlearn/collector.py'),
                                   'tmlearn.collector.SessionCollector': ('collector.html#sessioncollector', 'tmlearn/collector.py'),
                                   'tmlearn.collector.SessionCollector.__init__': ( 'collector.html#sessioncollector.__init__',
                                                                                    'tmlearn/collector.py'),
                                   'tmlearn.collector.SessionCollector.collect_episode': ( 'collector.html#sessioncollector.collect_episode',
                                                                                           'tmlearn/collector.py'),
                                   'tmlearn.collector.SessionCollector.collect_step': ( 'collector.html#sessioncollector.collect_step',
                                                                                        'tmlearn/collector.py'),
                                   'tmlearn.collector.SessionCollector.execute': ( 'collector.html#sessioncollector.execute',
                                                                                   'tmlearn/collector.py'),
                                   'tmlearn.collector.SessionCollector.load_state_dict': ( 'collector.html#sessioncollector.load_state_dict',
                                                                                           'tmlearn/collector.py'),
                                   'tmlearn.collector.SessionCollector.state_dict': ( 'collector.html#sessioncollector.state_dict',
                                                                                      'tmlearn/collector.py'),
                                   'tmlearn.collector.SessionPublisherCallback': ( 'collector.html#sessionpublishercallback',
                                                                                   'tmlearn/collector.py'),
                                   'tmlearn.collector.SessionPublisherCallback.after_done': ( 'collector.html#sessionpublishercallback.after_done',
                                                                                              'tmlearn/collector.py'),
                                   'tmlearn.collector.SessionPublisherCallback.after_reset': ( 'collector.html#sessionpublishercallback.after_reset',
                                                                                               'tmlearn/collector.py'),
                                   'tmlearn.collector.SessionPublisherCallback.after_session': ( 'collector.html#sessionpublishercallback.after_session',
                                                                                                 'tmlearn/collector.py'),
                                   'tmlearn.collector.SessionPublisherCallback.before_load_map': ( 'collector.html#sessionpublishercallback.before_load_map',
                                                                                                   'tmlearn/collector.py'),
                                   'tmlearn.collector.SessionPublisherCallback.before_session': ( 'collector.html#sessionpublishercallback.before_session',
                                                                                                  'tmlearn/collector.py'),
                                   'tmlearn.collector.SessionScheduler': ('collector.html#sessionscheduler', 'tmlearn/collector.py'),
                                   'tmlearn.collector.SessionScheduler.__init__': ( 'collector.html#sessionscheduler.__init__',
                                                                                    'tmlearn/collector.py'),
                                   'tmlearn.collector.SessionScheduler.done': ( 'collector.html#sessionscheduler.done',
                                                                                'tmlearn/collector.py'),
                                   'tmlearn.collector.SessionScheduler.end_episode': ( 'collector.html#sessionscheduler.end_episode',
                                                                                       'tmlearn/collector.py'),
                                   'tmlearn.collector.SessionScheduler.end_session': ( 'collector.html#sessionscheduler.end_session',
                                                                                       'tmlearn/collector.py'),
                                   'tmlearn.collector.SessionScheduler.load_state_dict': ( 'collector.html#sessionscheduler.load_state_dict',
                                                                                           'tmlearn/collector.py'),
                                   'tmlearn.collector.SessionScheduler.reset': ( 'collector.html#sessionscheduler.reset',
                                                                                 'tmlearn/collector.py'),
                                   'tmlearn.collector.SessionScheduler.state_dict': ( 'collector.html#sessionscheduler.state_dict',
                                                                                      'tmlearn/collector.py'),
                                   'tmlearn.collector.SessionStats': ('collector.html#sessionstats', 'tmlearn/collector.py'),
                                   'tmlearn.collector.SessionStats.empty': ('collector.html#sessionstats.empty', 'tmlearn/collector.py'),
                                   'tmlearn.collector.SessionStats.empty_finishes': ( 'collector.html#sessionstats.empty_finishes',
                                                                                      'tmlearn/collector.py'),
                                   'tmlearn.collector.SessionStats.from_df': ( 'collector.html#sessionstats.from_df',
                                                                               'tmlearn/collector.py'),
                                   'tmlearn.collector.SessionStats.safe_min_from_df': ( 'collector.html#sessionstats.safe_min_from_df',
                                                                                        'tmlearn/collector.py'),
                                   'tmlearn.collector.SessionStats.update_after_episode': ( 'collector.html#sessionstats.update_after_episode',
                                                                                            'tmlearn/collector.py'),
                                   'tmlearn.collector.SessionStats.update_best_value': ( 'collector.html#sessionstats.update_best_value',
                                                                                         'tmlearn/collector.py'),
                                   'tmlearn.collector.StepPublisherCallback': ( 'collector.html#steppublishercallback',
                                                                                'tmlearn/collector.py'),
                                   'tmlearn.collector.StepPublisherCallback.after_step_push': ( 'collector.html#steppublishercallback.after_step_push',
                                                                                                'tmlearn/collector.py'),
                                   'tmlearn.collector.TelemetryTimeoutRecoverCallback': ( 'collector.html#telemetrytimeoutrecovercallback',
                                                                                          'tmlearn/collector.py'),
                                   'tmlearn.collector.TelemetryTimeoutRecoverCallback.__init__': ( 'collector.html#telemetrytimeoutrecovercallback.__init__',
                                                                                                   'tmlearn/collector.py'),
                                   'tmlearn.collector.TelemetryTimeoutRecoverCallback.after_env_step': ( 'collector.html#telemetrytimeoutrecovercallback.after_env_step',
                                                                                                         'tmlearn/collector.py'),
                                   'tmlearn.collector.WandbCollectorCallback': ( 'collector.html#wandbcollectorcallback',
                                                                                 'tmlearn/collector.py'),
                                   'tmlearn.collector.WandbCollectorCallback.__init__': ( 'collector.html#wandbcollectorcallback.__init__',
                                                                                          'tmlearn/collector.py'),
                                   'tmlearn.collector.WandbCollectorCallback.after_done': ( 'collector.html#wandbcollectorcallback.after_done',
                                                                                            'tmlearn/collector.py'),
                                   'tmlearn.collector.WandbCollectorCallback.after_session': ( 'collector.html#wandbcollectorcallback.after_session',
                                                                                               'tmlearn/collector.py'),
                                   'tmlearn.collector.WandbCollectorCallback.before_session': ( 'collector.html#wandbcollectorcallback.before_session',
                                                                                                'tmlearn/collector.py'),
                                   'tmlearn.collector.WandbCollectorCallback.create_run': ( 'collector.html#wandbcollectorcallback.create_run',
                                                                                            'tmlearn/collector.py'),
                                   'tmlearn.collector.WandbCollectorCallback.existing_run': ( 'collector.html#wandbcollectorcallback.existing_run',
                                                                                              'tmlearn/collector.py'),
                                   'tmlearn.collector.WandbCollectorCallback.load_run': ( 'collector.html#wandbcollectorcallback.load_run',
                                                                                          'tmlearn/collector.py'),
                                   'tmlearn.collector.WandbCollectorCallback.wandb_api': ( 'collector.html#wandbcollectorcallback.wandb_api',
                                                                                           'tmlearn/collector.py'),
                                   'tmlearn.collector.WandbCollectorCallback.wandb_path': ( 'collector.html#wandbcollectorcallback.wandb_path',
                                                                                            'tmlearn/collector.py'),
                                   'tmlearn.collector.WandbGhostSaver': ('collector.html#wandbghostsaver', 'tmlearn/collector.py'),
                                   'tmlearn.collector.WandbGhostSaver.__init__': ( 'collector.html#wandbghostsaver.__init__',
                                                                                   'tmlearn/collector.py'),
                                   'tmlearn.collector.WandbGhostSaver.save_url': ( 'collector.html#wandbghostsaver.save_url',
                                                                                   'tmlearn/collector.py'),
                                   'tmlearn.collector.publish': ('collector.html#publish', 'tmlearn/collector.py')},
            'tmlearn.net': { 'tmlearn.net.ThreadServer': ('net.html#threadserver', 'tmlearn/net.py'),
                             'tmlearn.net.ThreadServer.__del__': ('net.html#threadserver.__del__', 'tmlearn/net.py'),
                             'tmlearn.net.ThreadServer.__init__': ('net.html#threadserver.__init__', 'tmlearn/net.py'),
                             'tmlearn.net.ThreadServer.port': ('net.html#threadserver.port', 'tmlearn/net.py'),
                             'tmlearn.net.WebsocketServer': ('net.html#websocketserver', 'tmlearn/net.py'),
                             'tmlearn.net.WebsocketServer.__init__': ('net.html#websocketserver.__init__', 'tmlearn/net.py'),
                             'tmlearn.net.WebsocketServer._put_to_subscribers': ( 'net.html#websocketserver._put_to_subscribers',
                                                                                  'tmlearn/net.py'),
                             'tmlearn.net.WebsocketServer.add_publisher': ('net.html#websocketserver.add_publisher', 'tmlearn/net.py')},
            'tmlearn.neural': { 'tmlearn.neural.Conv1dFlat': ('neural.html#conv1dflat', 'tmlearn/neural.py'),
                                'tmlearn.neural.Conv1dFlat.__init__': ('neural.html#conv1dflat.__init__', 'tmlearn/neural.py'),
                                'tmlearn.neural.DuelingNet': ('neural.html#duelingnet', 'tmlearn/neural.py'),
                                'tmlearn.neural.DuelingNet.__init__': ('neural.html#duelingnet.__init__', 'tmlearn/neural.py'),
                                'tmlearn.neural.DuelingNet.forward': ('neural.html#duelingnet.forward', 'tmlearn/neural.py'),
                                'tmlearn.neural.FlatLinearNet': ('neural.html#flatlinearnet', 'tmlearn/neural.py'),
                                'tmlearn.neural.FlatLinearNet.__init__': ('neural.html#flatlinearnet.__init__', 'tmlearn/neural.py'),
                                'tmlearn.neural.Flatten': ('neural.html#flatten', 'tmlearn/neural.py'),
                                'tmlearn.neural.Flatten.__init__': ('neural.html#flatten.__init__', 'tmlearn/neural.py'),
                                'tmlearn.neural.StateCatNet': ('neural.html#statecatnet', 'tmlearn/neural.py'),
                                'tmlearn.neural.StateCatNet.__init__': ('neural.html#statecatnet.__init__', 'tmlearn/neural.py'),
                                'tmlearn.neural.StateCatNet.forward': ('neural.html#statecatnet.forward', 'tmlearn/neural.py'),
                                'tmlearn.neural.TimmModel': ('neural.html#timmmodel', 'tmlearn/neural.py'),
                                'tmlearn.neural.TimmModel.__init__': ('neural.html#timmmodel.__init__', 'tmlearn/neural.py'),
                                'tmlearn.neural.TimmModel.forward': ('neural.html#timmmodel.forward', 'tmlearn/neural.py'),
                                'tmlearn.neural.VisualNet': ('neural.html#visualnet', 'tmlearn/neural.py'),
                                'tmlearn.neural.VisualNet.__init__': ('neural.html#visualnet.__init__', 'tmlearn/neural.py'),
                                'tmlearn.neural.init_weights': ('neural.html#init_weights', 'tmlearn/neural.py'),
                                'tmlearn.neural.truncated_timm_model': ('neural.html#truncated_timm_model', 'tmlearn/neural.py')},
            'tmlearn.replay_buffer': { 'tmlearn.replay_buffer.PrioritizedReplayBuffer': ( 'replay_buffer.html#prioritizedreplaybuffer',
                                                                                          'tmlearn/replay_buffer.py'),
                                       'tmlearn.replay_buffer.PrioritizedReplayBuffer.__init__': ( 'replay_buffer.html#prioritizedreplaybuffer.__init__',
                                                                                                   'tmlearn/replay_buffer.py'),
                                       'tmlearn.replay_buffer.PrioritizedReplayBuffer.__len__': ( 'replay_buffer.html#prioritizedreplaybuffer.__len__',
                                                                                                  'tmlearn/replay_buffer.py'),
                                       'tmlearn.replay_buffer.PrioritizedReplayBuffer._push': ( 'replay_buffer.html#prioritizedreplaybuffer._push',
                                                                                                'tmlearn/replay_buffer.py'),
                                       'tmlearn.replay_buffer.PrioritizedReplayBuffer.buffer': ( 'replay_buffer.html#prioritizedreplaybuffer.buffer',
                                                                                                 'tmlearn/replay_buffer.py'),
                                       'tmlearn.replay_buffer.PrioritizedReplayBuffer.empty_queue': ( 'replay_buffer.html#prioritizedreplaybuffer.empty_queue',
                                                                                                      'tmlearn/replay_buffer.py'),
                                       'tmlearn.replay_buffer.PrioritizedReplayBuffer.last_insert_time': ( 'replay_buffer.html#prioritizedreplaybuffer.last_insert_time',
                                                                                                           'tmlearn/replay_buffer.py'),
                                       'tmlearn.replay_buffer.PrioritizedReplayBuffer.pos': ( 'replay_buffer.html#prioritizedreplaybuffer.pos',
                                                                                              'tmlearn/replay_buffer.py'),
                                       'tmlearn.replay_buffer.PrioritizedReplayBuffer.priorities': ( 'replay_buffer.html#prioritizedreplaybuffer.priorities',
                                                                                                     'tmlearn/replay_buffer.py'),
                                       'tmlearn.replay_buffer.PrioritizedReplayBuffer.push': ( 'replay_buffer.html#prioritizedreplaybuffer.push',
                                                                                               'tmlearn/replay_buffer.py'),
                                       'tmlearn.replay_buffer.PrioritizedReplayBuffer.sample': ( 'replay_buffer.html#prioritizedreplaybuffer.sample',
                                                                                                 'tmlearn/replay_buffer.py'),
                                       'tmlearn.replay_buffer.PrioritizedReplayBuffer.update_priorities': ( 'replay_buffer.html#prioritizedreplaybuffer.update_priorities',
                                                                                                            'tmlearn/replay_buffer.py')},
            'tmlearn.training': { 'tmlearn.training.ExperienceTimeoutCallback': ( 'training.html#experiencetimeoutcallback',
                                                                                  'tmlearn/training.py'),
                                  'tmlearn.training.ExperienceTimeoutCallback.__init__': ( 'training.html#experiencetimeoutcallback.__init__',
                                                                                           'tmlearn/training.py'),
                                  'tmlearn.training.ExperienceTimeoutCallback.before_fit_one_batch': ( 'training.html#experiencetimeoutcallback.before_fit_one_batch',
                                                                                                       'tmlearn/training.py'),
                                  'tmlearn.training.ExperienceTimeoutException': ( 'training.html#experiencetimeoutexception',
                                                                                   'tmlearn/training.py'),
                                  'tmlearn.training.LrSchedulerCallback': ('training.html#lrschedulercallback', 'tmlearn/training.py'),
                                  'tmlearn.training.LrSchedulerCallback.__init__': ( 'training.html#lrschedulercallback.__init__',
                                                                                     'tmlearn/training.py'),
                                  'tmlearn.training.LrSchedulerCallback.before_fit': ( 'training.html#lrschedulercallback.before_fit',
                                                                                       'tmlearn/training.py'),
                                  'tmlearn.training.LrSchedulerCallback.before_fit_one_batch': ( 'training.html#lrschedulercallback.before_fit_one_batch',
                                                                                                 'tmlearn/training.py'),
                                  'tmlearn.training.LrSchedulerCallback.load_state_dict': ( 'training.html#lrschedulercallback.load_state_dict',
                                                                                            'tmlearn/training.py'),
                                  'tmlearn.training.LrSchedulerCallback.state_dict': ( 'training.html#lrschedulercallback.state_dict',
                                                                                       'tmlearn/training.py'),
                                  'tmlearn.training.MapScheduler': ('training.html#mapscheduler', 'tmlearn/training.py'),
                                  'tmlearn.training.MapScheduler.__init__': ('training.html#mapscheduler.__init__', 'tmlearn/training.py'),
                                  'tmlearn.training.MapScheduler.done_maps_target': ( 'training.html#mapscheduler.done_maps_target',
                                                                                      'tmlearn/training.py'),
                                  'tmlearn.training.MapScheduler.load_state_dict': ( 'training.html#mapscheduler.load_state_dict',
                                                                                     'tmlearn/training.py'),
                                  'tmlearn.training.MapScheduler.next_maps_target': ( 'training.html#mapscheduler.next_maps_target',
                                                                                      'tmlearn/training.py'),
                                  'tmlearn.training.MapScheduler.start': ('training.html#mapscheduler.start', 'tmlearn/training.py'),
                                  'tmlearn.training.MapScheduler.state_dict': ( 'training.html#mapscheduler.state_dict',
                                                                                'tmlearn/training.py'),
                                  'tmlearn.training.OneMapScheduler': ('training.html#onemapscheduler', 'tmlearn/training.py'),
                                  'tmlearn.training.OneMapScheduler.__init__': ( 'training.html#onemapscheduler.__init__',
                                                                                 'tmlearn/training.py'),
                                  'tmlearn.training.OneMapScheduler.load_state_dict': ( 'training.html#onemapscheduler.load_state_dict',
                                                                                        'tmlearn/training.py'),
                                  'tmlearn.training.OneMapScheduler.start': ('training.html#onemapscheduler.start', 'tmlearn/training.py'),
                                  'tmlearn.training.OneMapScheduler.state_dict': ( 'training.html#onemapscheduler.state_dict',
                                                                                   'tmlearn/training.py'),
                                  'tmlearn.training.Training': ('training.html#training', 'tmlearn/training.py'),
                                  'tmlearn.training.Training.__init__': ('training.html#training.__init__', 'tmlearn/training.py'),
                                  'tmlearn.training.Training.build_worker': ('training.html#training.build_worker', 'tmlearn/training.py'),
                                  'tmlearn.training.Training.fit': ('training.html#training.fit', 'tmlearn/training.py'),
                                  'tmlearn.training.Training.init_wandb_run': ( 'training.html#training.init_wandb_run',
                                                                                'tmlearn/training.py'),
                                  'tmlearn.training.Training.load_agent': ('training.html#training.load_agent', 'tmlearn/training.py'),
                                  'tmlearn.training.Training.load_state_dict': ( 'training.html#training.load_state_dict',
                                                                                 'tmlearn/training.py'),
                                  'tmlearn.training.Training.save_agent': ('training.html#training.save_agent', 'tmlearn/training.py'),
                                  'tmlearn.training.Training.state_dict': ('training.html#training.state_dict', 'tmlearn/training.py'),
                                  'tmlearn.training.Training.training_runs': ( 'training.html#training.training_runs',
                                                                               'tmlearn/training.py'),
                                  'tmlearn.training.Training.wandb_path': ('training.html#training.wandb_path', 'tmlearn/training.py'),
                                  'tmlearn.training.WandbSaveAgentPersistentCallback': ( 'training.html#wandbsaveagentpersistentcallback',
                                                                                         'tmlearn/training.py'),
                                  'tmlearn.training.WandbSaveAgentPersistentCallback.__init__': ( 'training.html#wandbsaveagentpersistentcallback.__init__',
                                                                                                  'tmlearn/training.py'),
                                  'tmlearn.training.WandbSaveAgentPersistentCallback.before_fit': ( 'training.html#wandbsaveagentpersistentcallback.before_fit',
                                                                                                    'tmlearn/training.py'),
                                  'tmlearn.training.WandbSaveAgentPersistentCallback.before_fit_one_batch': ( 'training.html#wandbsaveagentpersistentcallback.before_fit_one_batch',
                                                                                                              'tmlearn/training.py'),
                                  'tmlearn.training.WandbSaveAgentPersistentCallback.load_state_dict': ( 'training.html#wandbsaveagentpersistentcallback.load_state_dict',
                                                                                                         'tmlearn/training.py'),
                                  'tmlearn.training.WandbSaveAgentPersistentCallback.state_dict': ( 'training.html#wandbsaveagentpersistentcallback.state_dict',
                                                                                                    'tmlearn/training.py'),
                                  'tmlearn.training.WandbSaveAgentSlidingCallback': ( 'training.html#wandbsaveagentslidingcallback',
                                                                                      'tmlearn/training.py'),
                                  'tmlearn.training.WandbSaveAgentSlidingCallback.__init__': ( 'training.html#wandbsaveagentslidingcallback.__init__',
                                                                                               'tmlearn/training.py'),
                                  'tmlearn.training.WandbSaveAgentSlidingCallback._save': ( 'training.html#wandbsaveagentslidingcallback._save',
                                                                                            'tmlearn/training.py'),
                                  'tmlearn.training.WandbSaveAgentSlidingCallback.before_fit_one_batch': ( 'training.html#wandbsaveagentslidingcallback.before_fit_one_batch',
                                                                                                           'tmlearn/training.py')},
            'tmlearn.utils': { 'tmlearn.utils.Counter': ('utils.html#counter', 'tmlearn/utils.py'),
                               'tmlearn.utils.Counter.__init__': ('utils.html#counter.__init__', 'tmlearn/utils.py'),
                               'tmlearn.utils.Counter.increment': ('utils.html#counter.increment', 'tmlearn/utils.py'),
                               'tmlearn.utils.Counter.value': ('utils.html#counter.value', 'tmlearn/utils.py'),
                               'tmlearn.utils.IntervalCall': ('utils.html#intervalcall', 'tmlearn/utils.py'),
                               'tmlearn.utils.IntervalCall.__del__': ('utils.html#intervalcall.__del__', 'tmlearn/utils.py'),
                               'tmlearn.utils.IntervalCall.__init__': ('utils.html#intervalcall.__init__', 'tmlearn/utils.py'),
                               'tmlearn.utils.IntervalCall.run': ('utils.html#intervalcall.run', 'tmlearn/utils.py'),
                               'tmlearn.utils.Timer': ('utils.html#timer', 'tmlearn/utils.py'),
                               'tmlearn.utils.Timer.__call__': ('utils.html#timer.__call__', 'tmlearn/utils.py'),
                               'tmlearn.utils.Timer.__init__': ('utils.html#timer.__init__', 'tmlearn/utils.py'),
                               'tmlearn.utils.Timer.progress': ('utils.html#timer.progress', 'tmlearn/utils.py'),
                               'tmlearn.utils.Timer.reinit': ('utils.html#timer.reinit', 'tmlearn/utils.py'),
                               'tmlearn.utils.Triggers': ('utils.html#triggers', 'tmlearn/utils.py'),
                               'tmlearn.utils.Triggers.__call__': ('utils.html#triggers.__call__', 'tmlearn/utils.py'),
                               'tmlearn.utils.Triggers.__init__': ('utils.html#triggers.__init__', 'tmlearn/utils.py'),
                               'tmlearn.utils.Triggers._next': ('utils.html#triggers._next', 'tmlearn/utils.py'),
                               'tmlearn.utils.Triggers.reset': ('utils.html#triggers.reset', 'tmlearn/utils.py'),
                               'tmlearn.utils.attrsToDict': ('utils.html#attrstodict', 'tmlearn/utils.py'),
                               'tmlearn.utils.format_date': ('utils.html#format_date', 'tmlearn/utils.py'),
                               'tmlearn.utils.format_duration': ('utils.html#format_duration', 'tmlearn/utils.py'),
                               'tmlearn.utils.log_memory': ('utils.html#log_memory', 'tmlearn/utils.py')}}}
